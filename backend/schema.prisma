generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  role      UserRole @default(USER)
  avatar    String?
  isOnline  Boolean  @default(false)
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  roomMemberships  RoomMember[]
  createdRooms     Room[]

  @@map("users")
}

model Room {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isPublic    Boolean  @default(true)
  createdBy   String
  creator     User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members RoomMember[]
  messages Message[]

  @@map("rooms")
}

model RoomMember {
  id     String @id @default(cuid())
  userId String
  roomId String
  role   RoomRole @default(MEMBER)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
  @@map("room_members")
}

model Message {
  id          String   @id @default(cuid())
  content     String
  imageUrl    String?
  messageType MessageType @default(TEXT)
  senderId    String
  receiverId  String?  // For direct messages
  roomId      String?  // For room messages
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  sender   User  @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User? @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  room     Room? @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("messages")
}

enum UserRole {
  USER
  ADMIN
}

enum RoomRole {
  MEMBER
  ADMIN
}

enum MessageType {
  TEXT
  IMAGE
  SYSTEM
}